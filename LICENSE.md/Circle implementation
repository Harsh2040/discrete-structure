#include<iostream>
#include <map>
#include <list>
using namespace std;



map<int,list<int> > mymap;
map<int,list<int> >::iterator it;
void showallpoints(map<int,list<int> >&mymap)
{
	for( it=mymap.begin();it!=mymap.end();it++)
	{
		list<int>temp=it->second;
		for(list<int>::iterator p=temp.begin();p!=temp.end();p++)
		{
			cout<<"("<<it->first<<","<<*p<<")"<<endl;
			
		}
	}
}

 void putpixelone (int m,int n,map<int,list<int> >&mymap)
 {
 	map<int,list<int> >::iterator it;
 	if(mymap.find(m)!=mymap.end())
 	{
	 
 	it=mymap.find(m);
 	list<int> temp=it->second;
 	list<int>::iterator p;
 	for(p=temp.begin();p!=temp.end();p++)
 	{
 		if( *p == n)
 		return;
 	
	 }
	 mymap[m].push_back(n);
}
else
mymap[m].push_back(n);
 	return;
 	
 }
void putpixelall (int p,int q,int x1,int y1)
 {
 	putpixelone(p+x1,q+y1,mymap);
 	putpixelone(q+x1,p+y1,mymap);
 	putpixelone(q+x1,-p+y1,mymap);
    putpixelone(p+x1,-q+y1,mymap);
 	putpixelone(-p+x1,-q+y1,mymap);
 	putpixelone(-q+x1,-p+y1,mymap);
 	putpixelone(-q+x1,p+y1,mymap);
 	putpixelone(-p+x1,q+y1,mymap);
 	return;
 }

void circle (int a, int b , float c, int a1,int b1)
{
	int p = c;
	int x = 0;
	int y = p;
	float decision_para = 3-2*(c);
	putpixelall(x,y,a1,b1);
	while(x<y)
	{
			
			
	    x= x+1;
		if (decision_para <= 0)
		{
			decision_para = decision_para + 4*x+6;
		}
		else
		{
			y = y-1;
			decision_para = decision_para + 4*(x-y)+10;
		
		}
       
		putpixelall(x,y,a1,b1);
	}
	return;
	

}

void neighbours (map <int,list<int> >&mymap,int given_pointx,int given_pointy)
{

	for (it = mymap.begin();it != mymap.end();++it)
	{
		if (it->first == given_pointx+1||it->first == given_pointx-1)
		{
			list<int> temp1 = it->second;
			list<int> :: iterator itr1;
			for(itr1 = temp1.begin();itr1 != temp1.end();++itr1)
			{
				if (given_pointy >0 && *itr1 >0 )
				cout <<"("<< it->first << ","<<*itr1 <<")"<< endl;
				else if (given_pointy <0 && *itr1 <0)
				cout <<"("<< it->first << ","<<*itr1 <<")"<< endl;
				else
				continue;	
				
			}
			
		}
	
}
}
int main ()
{
	int x=0,y=0;
	float r;
    int x1,y1;
    cin >> x1 >> y1;
	cin >> r; 
	circle (x,y,r,x1,y1); 
	cout << " Enter the neightboor" << endl;
	int nx,ny;
	cin >> nx >> ny;
    neighbours (mymap, nx,ny);
    cout << endl;
    showallpoints(mymap);
	
}
